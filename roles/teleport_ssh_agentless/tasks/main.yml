---
- name: Check if we already signed the host
  delegate_to: teleport
  register: auth_signed_file
  ansible.builtin.stat:
    path: /root/teleport-authsign/{{ ansible_hostname }}

- name: This role applies only to hosts in the nodes_ssh_agentless group
  when:
    - "'nodes_ssh_agentless' in group_names"
    - not auth_signed_file.stat.exists
  block:
    - name: Block for items needed to be performed on the cluster
      delegate_to: teleport
      block:
        - name: Create directory for templating out the agentless node objects
          ansible.builtin.file:
            path: /root/teleport-agentless
            state: directory
            mode: "0700"
            owner: root

        - name: Set random name value
          ansible.builtin.set_fact:
            agentless_name_uuid: "{{ 999999999999999999999999999999999999999999999999999999999999999999 | random | to_uuid | lower }}"


        - name: Template out the agentless node object
          ansible.builtin.template:
            src: node_agentless.yaml.j2
            dest: "/root/teleport-agentless/{{ ansible_hostname }}"
            mode: "0600"
            owner: root

        - name: Create the Agentless node object from file
          changed_when: true
          ansible.builtin.command:
            cmd: "tctl create -f '/root/teleport-agentless/{{ ansible_hostname }}'"

        - name: Create directory for auth sign keypairs
          ansible.builtin.file:
            path: /root/teleport-authsign
            state: directory
            mode: "0700"
            owner: root

        - name: Tctl auth sign
          changed_when: true
          ansible.builtin.command:
            cmd: >
              tctl auth sign
                --host  {{ ansible_default_ipv4.address }},{{ ansible_hostname }},{{ agentless_name_uuid }}
                --format openssh
                --out /root/teleport-authsign/{{ ansible_hostname }}

        - name: Slurp the Key
          no_log: true
          register: agentless_slurped_key
          ansible.builtin.slurp:
            src: "/root/teleport-authsign/{{ ansible_hostname }}"

        - name: Slurp the Cert
          no_log: true
          register: agentless_slurped_cert
          ansible.builtin.slurp:
            src: "/root/teleport-authsign/{{ ansible_hostname }}-cert.pub"


    # Stepping back to the agentless host
    - name: Place the key
      no_log: true
      ansible.builtin.copy:
        dest: "/etc/ssh/{{ ansible_hostname }}"
        mode: "0600"
        owner: root
        content: "{{ agentless_slurped_key.content | b64decode }}"

    - name: Place the cert
      no_log: true
      ansible.builtin.copy:
        dest: "/etc/ssh/{{ ansible_hostname }}-cert.pub"
        mode: "0600"
        owner: root
        content: "{{ agentless_slurped_cert.content | b64decode }}"

    - name: Modify the SSH config to include the auth signed HostKey
      notify: Restart SSH daemon # Requires teleport_lib
      ansible.builtin.lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: '^HostKey'
        line: "HostKey /etc/ssh/{{ ansible_hostname }}"

    - name: Modify the SSH config to include the auth signed HostCertificate
      notify: Restart SSH daemon # Requires teleport_lib
      ansible.builtin.lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: '^HostCertificate'
        line: "HostCertificate /etc/ssh/{{ ansible_hostname }}-cert.pub"

    - name: Get the SSH CA from our cluster
      ansible.builtin.copy:
        dest: /etc/ssh/teleport_openssh_ca.pub
        content: "{{ lookup('ansible.builtin.url', 'https://' + domain_name + '/webapi/auth/export?type=openssh') | regex_replace('^cert-authority ', '') }}"
        mode: "0644"
        owner: root

    - name: Configure SSHD to trust the Teleport Cluster CA
      notify: Restart SSH daemon # Requires teleport_lib role
      ansible.builtin.lineinfile:
        path: "/etc/ssh/sshd_config"
        regexp: "^TrustedUserCAKeys"
        line: "TrustedUserCAKeys /etc/ssh/teleport_openssh_ca.pub"
